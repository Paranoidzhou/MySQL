--DB:数据库   DBMS:数据库管理系统
--SQL:数据库语言 
--SQL语句不区分大小写,为了养成习惯尽量关键字大写
--DDL,DML,TCL,DQL,DCL
--DDL:数据定义语言   create,drop,alter,truncate
SELECT SYSDATE FROM dual;     -- 光标选中行 ctrl+回车,可执行当前行
--CREATE(创建)
CREATE TABLE employee( 
   id NUMBER(4),        --NUMBER(4): 表示了最大长度4位数  例如:最大9999
   name VARCHAR2(20),   --VARCHAR2 : 变长字符串,最大长度为4000字节,节省空间,即使开很大空间,实际是用多少,占多少.
   gender CHAR(1),		--java中为字符类型,数据库中为定长字符串,最大2000字节.定太大了浪费空间,开多少占多少,少了会自动补空格
   birth DATE,			--DATA :　长度为7个字节,世纪 年 月 日 时 分 秒,只能精确到秒,默认显示"日-月-年"
   salary NUMBER(6,2),  --NUMBER(6,2) : 表示整数和小数,最大长度为6位,其中小数位占2位  例如:最大9999.99
   job VARCHAR2(30),
   deptno NUMBER(2)
);


--修改(ALTER),(RENAME)
--修改表名
drop table employee;
RENAME employee TO myemp;
--修改表结构
ALTER TABLE myemp ADD(hiredate DATE);--添加新字段,只能被追加到表最后列
ALTER TABLE myemp DROP(hiredate);--删除字段
ALTER TABLE myemp MODIFY(name VARCHAR2(40));--修改字段,表中有数据不要修改字段类型,长度尽可能只增不减
--删除(DROP)
DROP TABLE myemp;
/*
  字段约束类型
  DEFAULT:增加默认值
  NOT NULL:字段不允许为空(数据库中所有字段类型,默认值都是NULL)
*/
CREATE TABLE employee( 
  id NUMBER(4),
  name VARCHAR2(20) NOT NULL,--姓名字段不允许为空
  gender CHAR(1) DEFAULT 'M',--增加性别字段默认值为男
  birth DATE,
  salary NUMBER(6,2),
  job VARCHAR2(30),
  deptno NUMBER(2)
);
--DML:数据操作语言   insert,update,delete,select
--插入(INSERT)
INSERT INTO employee(id,name,job) 
VALUES (1002,'李四','演员');--指定字段插入
INSERT INTO employee(id,name,birth) 
VALUES (1003,'王五',TO_DATE('1992-08-08','YYYY-MM-DD'));--指定字段指定日期
--修改(UPDATE)
UPDATE employee SET salary=5000;--修改所有
UPDATE employee SET salary=8000 WHERE id=1001;--修改指定字段
select * from employee;
--删除(DELETE),(TRUNCATE)
DELETE FROM employee;--删除表中全部数据
TRUNCATE TABLE employee;--删除表中全部数据不可回退
commit;
rollback;
--TCL:事务控制语言   COMMIT,ROLLBACK
--DQL:数据查询语言   SELECT
SELECT * FROM emp;
/*
  字符串函数:
  CONCAT(c1,c2):连接c1,c2
*/
SELECT CONCAT(ename,sal) FROM emp_l;
SELECT CONCAT(CONCAT(ename,':'),sal) FROM emp_l;
SELECT ename||':'||sal FROM emp_l;--"||"也可以用来连接字符串
/*
  LENGTH(c):查看指定字符串长度
*/
SELECT LENGTH(ename) FROM emp_l;--查看员工姓名的长度
/*
  UPPER(全大写),LOWER(全小写),INITCAP(首字母大写)
*/
SELECT UPPER('helloword'),LOWER('HELLOWORD'),INITCAP('HELLOWORD') 
FROM dual;--dual伪表,不是一张真实存在的表
/*
  去除字符串两端重复字符:TRIM(两边都去除),LTRIM(左去除),RTRIM(右去除)
*/
SELECT TRIM('e'FROM'eeeeeliteeee')FROM dual;
SELECT LTRIM('eeeeliteeee','e')FROM dual;
/*
  补位函数
  LPAD(左补位),RPAD(右补位)
  LPAD(c1,n,c2)   :c1表示需要补位的字符串,n表示要显示的长度,
                    c2表示要补的字符,长度不足则补c2,多则从左往右截取
*/
SELECT ename,LPAD(sal,3,'$') FROM emp_l;
/*
  截取字符串
  SUBSTR(c,n,m)   :c表示要截取的字符串,n为截取的起始位置,m为截取多少,
                    n为负数则从倒数位置开始截取,数据库中下标都是从1开始
*/
SELECT SUBSTR('thinking in java',10,4) FROM dual;
/*
  INSTR(c1,c2[,n[m]])   :查找c2在c1中的位置,n表示从第几个字符开始检索,
                          m表示第几次出现,不写则默认为1
*/
SELECT INSTR('thinking in java','in') FROM dual;
/*
  空值函数:
  ROUND(n,m)    ：截取字符串，n表示需要四舍五入的数，
                  m表示保留到小数点后几位，四舍五入
*/
SELECT ROUND(45.678,2)FROM dual;
--TRUNC(n,m)    :参数意义与ROUND相同,区别是截取的字符串不做四舍五入
SELECT TRUNC(45.678,2)FROM dual;
/*
  CEIL(向上取整),FLOOR(向下取整)
*/
SELECT CEIL(45.378)FROM dual;--小数位如果有值则整数位进1
SELECT FLOOR(45.678)FROM dual;--小数位不管有没有值,都舍掉
/*
  日期相关关键字:oracle内部时间函数,精确到秒
  SYSDATE:当前系统时间,返回DATE类型默认显示为日月年格式
  SYSTIMESTAMP:当前系统时间,返回时间戳类型
*/
SELECT SYSDATE FROM dual;
SELECT SYSTIMESTAMP FROM dual;
/*
  日期转换函数:
  TO_DATE():将字符串按照指定日期格式转换为DATE类型数据
*/
SELECT TO_DATE('2008-08-08 08:08:08','YYYY-MM-DD HH24:MI:SS')FROM dual;
--DATE类型数据可以进行计算,两个DATE类型相减,差等于相差的天数,
--加减数字等于加减天数
SELECT SYSDATE+1 FROM dual;--查看明天是哪天
--查看每个员工入职到今天一共多少天
SELECT ename,SYSDATE-hiredate FROM emp_l;
/*
  TO_CHAR():将日期转换为字符串
*/
--按照自己定义的格式查看当前系统时间
SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') FROM dual;
/*
  日期格式中RR,YY的区别
  RR,YY都是用两位数字表示年.
  使用TO_DATE()函数时,对世纪处理方式不同
  YY是根据当前系统所在世纪进行解释世纪的
  RR是根据具体情况判定
*/
SELECT TO_CHAR(TO_DATE('99-09-09','YY-MM-DD'),'YYYY-MM-DD')FROM dual;
SELECT TO_CHAR(TO_DATE('99-09-09','RR-MM-DD'),'YYYY-MM-DD')FROM dual;
/*
  日期常用函数:
  LAST_DAY(date);返回给定日期所在月的月底
*/
SELECT LAST_DAY(SYSDATE) FROM dual;
--ADD_MONTHS(date,i)    :对给定日期加指定月,i为加几个月,若为负数则减
SELECT ADD_MONTHS(SYSDATE,2)FROM dual;
--MONTHS_BETWEEN(date1,date2)   :计算两个日期之间相差的月
--查看每个员工入职到今天共多少个月
SELECT ename,MONTHS_BETWEEN(SYSDATE,hiredate) FROM emp_l;
--NEXT_DAY(date,i)    ;返回给定日期第二天开始一周之内的指定周几日期
SELECT NEXT_DAY(SYSDATE,2) FROM dual;--下周一的日期
/*
  GREATEST:最大值
  LEAST:最小值
*/
--查看给定日期的最小值
SELECT LEAST(SYSDATE,TO_DATE('2008-08-08','YYYY-MM-DD'))FROM dual;
/*
  EXTRACT:提取指定日期时间分量的值
*/
SELECT EXTRACT(YEAR FROM SYSDATE) FROM dual;--查看今天所在日期对应的年
/*
  插入NULL值
*/
CREATE TABLE student(
  id NUMBER(4),
  name VARCHAR2(20),
  gender CHAR(1)
);
INSERT INTO student VALUES(1001,'唐僧','M');
INSERT INTO student VALUES(1002,'悟空',NULL);--显示插入NULL值
INSERT INTO student(id,name)VALUES(1003,'八戒');--隐示插入NULL值
SELECT * FROM student;
--更新成为NULL值
UPDATE student SET gender=NULL WHERE id=1001; 
/*
  过滤条件判断NULL值
  判断NULL要使用IS NULL或IS NOT NULL
*/
DELETE FROM student WHERE gender IS NULL;
/*
  NULL的运算
  NULL与字符串连接等于什么也没干
  NULL与数字运算结果还是NULL
*/
SELECT * FROM emp_l;
SELECT ename||NULL FROM emp;
SELECT ename,sal+comm FROM emp_l;
/*
  空值函数;
  NVL(a1,a2)  :a1为NULL时.返回a2的值,a1不为NULL时,返回a1本身,
                意义在于将NULL值替换为非NULL值
*/
--查看每个员工的工资(底薪+绩效)
SELECT ename,sal,comm,sal+NVL(comm,0) FROM emp_l;
--NVL2(a1,a2,a3)  :a1为NULL时,返回a3的值,a1不为NULL时,返回a2
SELECT ename,sal,comm,NVL2(comm,'有绩效','没有绩效') FROM emp_l;
SELECT ename,sal,comm,NVL2(comm,sal+comm,sal) FROM emp_l;
/*
  字段别名:给字段或者表达式换成一个新的名字(读起来显示方便)
*/
SELECT ename AS name FROM emp_l;
SELECT ename name FROM emp_l;
SELECT ename name,sal+comm "sal" FROM emp_l;
/*
  查询使用:>,<,<=,>=,!=,<>,=
  连接多个条件使用AND或OR,AND的优先级高于OR,可以通过括号来提升优先级
*/
/*
  IN(list),NOT IN(list):判断在表中或不在表中(通常用在子查询中)
*/
--查看职位是'SALESMAN','CLERK'的员工信息
SELECT ename,sal,job FROM emp_l WHERE job IN('SALESMAN','CLERK');
--查看不在10号,20号部门的员工信息
SELECT ename,sal,deptno FROM emp_l WHERE deptno NOT IN(10,20);
/*
  LIKE(模糊查询)
  BETWEEN...AND...(在...之间)
  DISTINCT(去重)
  ORDER BY(排序):DESC(降序),ASC(升序)
  聚合函数(多行函数):MAX,MIN,AVG,SUM,COUNT(*)
  GROUP BY(分组)
  HAVING(过滤)
*/
--查看名字中第二个字母为'L',最后一个字母为'N'的员工信息
SELECT ename,sal FROM emp_l WHERE ename LIKE '_L%N';
--查询工资在1500-3000之间的员工
SELECT ename,sal FROM emp_l WHERE sal BETWEEN 1500 AND 3000;
--去除表中重复的部门号
SELECT DISTINCT deptno FROM emp_l;
--查询20号部门员工信息工资按照降序排列
SELECT * FROM emp_l WHERE deptno=20 ORDER BY sal DESC;
--查看公司的员工数
SELECT COUNT(*) FROM emp_l;
--查看同部门同职位的员工各多少人
SELECT deptno,job,COUNT(*) FROM emp_l GROUP BY deptno,job;
--查看平均工资高于2000的那些部门的最高工资是多少
SELECT deptno,MAX(sal) FROM emp_l GROUP BY deptno HAVING AVG(sal)>2000;
/*
  关联查询:多张表联合查询记录(结果集中的字段可能来自于多张表)
  关键点在于连接条件,数据库是根据这些连接条件找到表之间的对应关系,
  从而从这些字段中获取要查询的字段来构成结果集中的各个字段
*/
--表添加别名,通过别名.字段名的形式标注,可以降低编写SQL语句的复杂度,增加可读性
--查看每个员工的名字以及所在部门的名字
SELECT e.ename,e.deptno,d.dname 
FROM emp_l e,dept_l d 
WHERE e.deptno=d.deptno;
--查看部门号一样并且在纽约的员工
SELECT e.ename,e.deptno,d.loc 
FROM emp_l e,dept_l d 
WHERE e.deptno=d.deptno 
AND d.loc='NEW YORK';
/*
  笛卡尔积:不指定关联条件会产生笛卡尔积,一个无意义的结果集
*/
/*
  内连接:JOIN...ON...不满足连接条件的记录不会被查询出来
*/
--查询在纽约工作部门号一样的员工姓名
SELECT e.ename,e.deptno,d.loc 
FROM emp_l e JOIN dept_l d 
ON e.deptno=d.deptno 
AND d.loc='NEW YORK';
/*
  外连接:除了可以将满足连接条件的记录查询出来之外,
          还可以将不满足条件的记录查询出来
  外连接有三种:左外连接,右外连接,全外连接
  左外连接:以JOIN左侧表作为驱动表,该表中的所有记录都会查询出来,
          当某条记录不满足连接条件时,结果集中来自JOIN右侧表字段的全部为NULL
*/
--查询员工表与部门表部门号一样的员工
SELECT e.ename,e.deptno,d.dname,d.deptno 
FROM emp_l e 
LEFT OUTER JOIN dept_l d 
ON e.deptno=d.deptno;
SELECT e.ename,e.deptno,d.dname,d.deptno 
FROM emp_l e 
RIGHT OUTER JOIN dept_l d 
ON e.deptno=d.deptno;
/*
  EXISTS:用在过滤条件中,后跟一个子查询,只要该子查询可以查询出一条记录,
  那么EXISTS就认为满足条件
*/
--查看有员工的部门信息
select e.ename,e.deptno from emp_l e where EXISTS 
(select * from emp_l e join dept_l d on e.deptno=d.deptno);
/*
  分页查询:(方言,每种是数据库查询都不一样):
  将一个查询语句的数据分批分段显示
  好处:当一个查询语句查询结果集非常大时,减少网络传输数据量,提高响应速度,
  降低系统开销
  ROWNUM(伪列):不存在任何表中,但<每张表都能使用>都可以查询出该字段,
  该字段的值为查询的结果集中每条记录的行号
  该字段的值伴随查询过程动态生成，只要可以从表中查询出一条记录，
  字段的值是记录在当前结果集中的行号从1开始递增。
  查询范围：
  PageSize：每页显示的条目数。
  Page：要显示的页数
  Strat：（page-1）*pagesize+1
  end：pagesize*page
*/
--查看6-10行的记录
select * from
(select rownum rn,ename,job,sal,deptno from emp_l) 
where rn between 6 and 10; 

--查看公司工资的排名6-10
select * from 
(select rownum rn,t.* from
(select ename,job,sal,deptno from emp_l order by sal desc)t 
where rownum<=10) 
where rn >=6;
/*
  主键:非空且唯一
*/
create table employee(
  id number(4) primary key,
  name varchar2(20),
  gender char(2),
  sal number(4)
);
insert into employee values(1,'小明','M',4000);
select * from employee;
create sequence seq_emp_id;
insert into employee values(seq_emp_id.nextval,'小明','M',4000);
drop sequence seq_emp_id;
drop table employee;
select seq_emp_id.nextval from dual;


create table employee1(
  id number(4),
  name varchar2(20),
  gender char(2),
  sal number(4)
);
desc employee1;
alter table employee add constraint employee_id_pk primary key(id);











--DCL:数据控制语言(数据库管理员)






































